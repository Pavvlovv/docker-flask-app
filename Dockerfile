# Этап 1: Выбор базового образа
# Используем официальный "тонкий" образ Python с закрепленной версией,
# чтобы гарантировать предсказуемость и воспроизводимость сборок.
FROM python:3.10.13-slim-bullseye

# Этап 2: Установка рабочей директории
# Все последующие команды будут выполняться внутри этой папки в контейнере.
WORKDIR /app

# Этап 3: Оптимизация кеширования слоев
# Сначала копируем ТОЛЬКО файл с зависимостями. Docker кеширует этот шаг.
# Если requirements.txt не меняется, Docker использует кеш, что значительно
# ускоряет последующие сборки.
COPY requirements.txt .

# Этап 4: Установка зависимостей
# Устанавливаем библиотеки, перечисленные в requirements.txt.
# --no-cache-dir предотвращает сохранение кеша pip, что делает образ еще меньше.
RUN pip install --no-cache-dir -r requirements.txt

# Этап 5: Копирование кода приложения
# Теперь копируем остальной код. Файлы из .dockerignore будут проигнорированы.
COPY . .

# Этап 6: Повышение безопасности
# Создаем отдельного пользователя с ограниченными правами.
RUN useradd --create-home appuser

# Меняем владельца всех файлов в /app на нашего пользователя,
# чтобы приложение работало с минимально необходимыми правами.
RUN chown -R appuser:appuser /app

# Переключаемся на новосозданного пользователя.
USER appuser

# Этап 7: Указание порта и команды для запуска
# Документируем порт, на котором будет работать приложение.
EXPOSE 8080

# Запускаем приложение через production-ready WSGI-сервер Gunicorn.
# Формат exec (квадратные скобки) — лучшая практика для корректной обработки сигналов.
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "app:app"]
